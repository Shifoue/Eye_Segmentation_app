# upstream eye_seg_app {
#     server web_app:5000;
# }

# # # Uncomment to redirect http to https (optional)
# # server {
# #     listen 80;
# #     return 301 https://$host$request_uri;
# # }

# server {
#    # Change the port if you want NGINX to listen on a different port
#     listen 80;
#     # listen 443 ssl;
    
#     # ssl_certificate           /etc/nginx/cert.pem;
#     # ssl_certificate_key       /etc/nginx/cert.pem;

#     # ssl on;
#     # ssl_session_cache  builtin:1000  shared:SSL:10m;
#     # ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
#     # ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
#     # ssl_prefer_server_ciphers on;

#     # access_log            /var/log/nginx/eye_seg_app.access.log;

#     location / {

#       proxy_set_header        Host $host;
#       proxy_set_header        X-Real-IP $remote_addr;
#       proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
#       proxy_set_header        X-Forwarded-Proto $scheme;

#       proxy_pass          https://eye_seg_app;
#       proxy_read_timeout  90;
#     }

#     # location ~ ^/(websocket|d1ws|d2ws) {
#     #     proxy_pass https://eye_seg_app;
#     #     proxy_http_version 1.1;
#     #     proxy_set_header Upgrade $http_upgrade;
#     #     proxy_set_header Connection "upgrade";
#     #     proxy_set_header Host $host;
#     #     proxy_set_header Origin "";
#     #     proxy_set_header X-Real-IP $remote_addr;
#     #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#     #     proxy_set_header X-Forwarded-Proto $scheme;
#     # }
# }

worker_processes 1;

user nobody nogroup;
# 'user nobody nobody;' for systems with 'nobody' as a group instead
error_log  /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  access_log /var/log/nginx/access.log combined;
  sendfile on;

  upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    server unix:/tmp/gunicorn.sock fail_timeout=0;

    # for a TCP configuration
    # server 192.168.0.7:8000 fail_timeout=0;
  }

  server {
    # if no Host match, close the connection to prevent host spoofing
    listen 80 default_server;
    return 444;
  }

  server {
    # use 'listen 80 deferred;' for Linux
    # use 'listen 80 accept_filter=httpready;' for FreeBSD
    listen 80 deferred;
    client_max_body_size 4G;

    # set the correct host(s) for your site
    server_name eye-segmentation-app.com www.eye-segmentation-app.com;

    keepalive_timeout 5;

    # path for static files
    #root /path/to/app/current/public;

    location / {
      # checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
    }

    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass https://app_server;
    }

    error_page 500 502 503 504 /500.html;
    # location = /500.html {
    #   root /path/to/app/current/public;
    # }
  }
}